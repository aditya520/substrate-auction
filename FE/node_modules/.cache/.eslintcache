[{"/home/aditya/parity/substrate-front-end-template/src/index.js":"1","/home/aditya/parity/substrate-front-end-template/src/App.js":"2","/home/aditya/parity/substrate-front-end-template/src/Balances.js":"3","/home/aditya/parity/substrate-front-end-template/src/AccountSelector.js":"4","/home/aditya/parity/substrate-front-end-template/src/BlockNumber.js":"5","/home/aditya/parity/substrate-front-end-template/src/Events.js":"6","/home/aditya/parity/substrate-front-end-template/src/Interactor.js":"7","/home/aditya/parity/substrate-front-end-template/src/Metadata.js":"8","/home/aditya/parity/substrate-front-end-template/src/NodeInfo.js":"9","/home/aditya/parity/substrate-front-end-template/src/Transfer.js":"10","/home/aditya/parity/substrate-front-end-template/src/TemplateModule.js":"11","/home/aditya/parity/substrate-front-end-template/src/Upgrade.js":"12","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/index.js":"13","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/index.js":"14","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/SubstrateContext.js":"15","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/utils.js":"16","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/TxButton.js":"17","/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/DeveloperConsole.js":"18","/home/aditya/parity/substrate-front-end-template/src/config/index.js":"19"},{"size":150,"mtime":1619208355501,"results":"20","hashOfConfig":"21"},{"size":2673,"mtime":1619208355501,"results":"22","hashOfConfig":"21"},{"size":2389,"mtime":1619208355501,"results":"23","hashOfConfig":"21"},{"size":3555,"mtime":1619208355501,"results":"24","hashOfConfig":"21"},{"size":1619,"mtime":1619208355501,"results":"25","hashOfConfig":"21"},{"size":2192,"mtime":1619208355501,"results":"26","hashOfConfig":"21"},{"size":8101,"mtime":1619208355501,"results":"27","hashOfConfig":"21"},{"size":1471,"mtime":1619208355501,"results":"28","hashOfConfig":"21"},{"size":1538,"mtime":1619208355501,"results":"29","hashOfConfig":"21"},{"size":1972,"mtime":1619208355501,"results":"30","hashOfConfig":"21"},{"size":5212,"mtime":1619229305471,"results":"31","hashOfConfig":"21"},{"size":1578,"mtime":1619208355501,"results":"32","hashOfConfig":"21"},{"size":167,"mtime":1619208355501,"results":"33","hashOfConfig":"21"},{"size":160,"mtime":1619208355501,"results":"34","hashOfConfig":"21"},{"size":4308,"mtime":1619208355501,"results":"35","hashOfConfig":"21"},{"size":210,"mtime":1619208355501,"results":"36","hashOfConfig":"21"},{"size":8005,"mtime":1619208355501,"results":"37","hashOfConfig":"21"},{"size":463,"mtime":1619208355501,"results":"38","hashOfConfig":"21"},{"size":646,"mtime":1619208355501,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"o4tkyx",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/aditya/parity/substrate-front-end-template/src/index.js",[],["80","81"],"/home/aditya/parity/substrate-front-end-template/src/App.js",[],"/home/aditya/parity/substrate-front-end-template/src/Balances.js",[],"/home/aditya/parity/substrate-front-end-template/src/AccountSelector.js",[],"/home/aditya/parity/substrate-front-end-template/src/BlockNumber.js",[],"/home/aditya/parity/substrate-front-end-template/src/Events.js",[],"/home/aditya/parity/substrate-front-end-template/src/Interactor.js",[],"/home/aditya/parity/substrate-front-end-template/src/Metadata.js",[],"/home/aditya/parity/substrate-front-end-template/src/NodeInfo.js",[],"/home/aditya/parity/substrate-front-end-template/src/Transfer.js",[],"/home/aditya/parity/substrate-front-end-template/src/TemplateModule.js",["82","83"],"// React and Semantic UI elements.\n// Polkadot-JS utilities for hashing data.\nimport { blake2AsHex } from '@polkadot/util-crypto';\nimport React, { useEffect, useState } from 'react';\nimport { Form, Grid, Input, Message } from 'semantic-ui-react';\n// Pre-built Substrate front-end utilities for connecting to a node\n// and making a transaction.\nimport { useSubstrate } from './substrate-lib';\nimport { TxButton } from './substrate-lib/components';\n\n// Our main Proof Of Existence Component which is exported.\nexport function Main (props) {\n  // Establish an API to talk to our Substrate node.\n  const { api } = useSubstrate();\n  // Get the selected user from the `AccountSelector` component.\n  const { accountPair } = props;\n  // React hooks for all the state variables we track.\n  // Learn more at: https://reactjs.org/docs/hooks-intro.html\n  const [status, setStatus] = useState('');\n  const [digest, setDigest] = useState('');\n  const [owner, setOwner] = useState('');\n  const [block, setBlock] = useState(0);\n\n  // Our `FileReader()` which is accessible from our functions below.\n  let fileReader;\n\n  // Takes our file, and creates a digest using the Blake2 256 hash function.\n  const bufferToDigest = () => {\n    // Turns the file content to a hexadecimal representation.\n    const content = Array.from(new Uint8Array(fileReader.result))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n\n    const hash = blake2AsHex(content, 256);\n    setDigest(hash);\n  };\n\n  // Callback function for when a new file is selected.\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader();\n    fileReader.onloadend = bufferToDigest;\n    fileReader.readAsArrayBuffer(file);\n  };\n\n  // React hook to update the owner and block number information for a file.\n  useEffect(() => {\n    let unsubscribe;\n\n    // Polkadot-JS API query to the `proofs` storage item in our pallet.\n    // This is a subscription, so it will always get the latest value,\n    // even if it changes.\n    api.query.templateModule\n      .proofs(digest, (result) => {\n        // Our storage item returns a tuple, which is represented as an array.\n        setOwner(result[0].toString());\n        setBlock(result[1].toNumber());\n      })\n      .then((unsub) => {\n        unsubscribe = unsub;\n      });\n\n    return () => unsubscribe && unsubscribe();\n    // This tells the React hook to update whenever the file digest changes\n    // (when a new file is chosen), or when the storage subscription says the\n    // value of the storage item has updated.\n  }, [digest, api.query.templateModule]);\n\n  // We can say a file digest is claimed if the stored block number is not 0.\n  function isClaimed () {\n    return block !== 0;\n  }\n\n  // The actual UI elements which are returned from our component.\n  return (\n    <Grid.Column>\n      <h1>Proof Of Existence</h1>\n      {/* Show warning or success message if the file is or is not claimed. */}\n      <Form success={!!digest && !isClaimed()} warning={isClaimed()}>\n        <Form.Field>\n          {/* File selector with a callback to `handleFileChosen`. */}\n          <Input\n            type='file'\n            id='file'\n            label='Your File'\n            onChange={ e => handleFileChosen(e.target.files[0]) }\n          />\n          {/* Show this message if the file is available to be claimed */}\n          <Message success header='File Digest Unclaimed' content={digest} />\n          {/* Show this message if the file is already claimed. */}\n          <Message\n            warning\n            header='File Digest Claimed'\n            list={[digest, `Owner: ${owner}`, `Block: ${block}`]}\n          />\n        </Form.Field>\n        {/* Buttons for interacting with the component. */}\n        <Form.Field>\n          {/* Button to create a claim. Only active if a file is selected,\n          and not already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label={'Create Claim'}\n            setStatus={setStatus}\n            type='SIGNED-TX'\n            disabled={isClaimed() || !digest}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'createClaim',\n              inputParams: [digest],\n              paramFields: [true]\n            }}\n          />\n          {/* Button to revoke a claim. Only active if a file is selected,\n          and is already claimed. Updates the `status`. */}\n          <TxButton\n            accountPair={accountPair}\n            label='Revoke Claim'\n            setStatus={setStatus}\n            type='SIGNED-TX'\n            disabled={!isClaimed() || owner !== accountPair.address}\n            attrs={{\n              palletRpc: 'templateModule',\n              callable: 'revokeClaim',\n              inputParams: [digest],\n              paramFields: [true]\n            }}\n          />\n        </Form.Field>\n        {/* Status message about the transaction. */}\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\n      </Form>\n    </Grid.Column>\n  );\n}\n\nexport default function TemplateModule (props) {\n  const { api } = useSubstrate();\n  return (api.query.templateModule && api.query.templateModule.proofs\n    ? <Main {...props} /> : null);\n}","/home/aditya/parity/substrate-front-end-template/src/Upgrade.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/index.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/index.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/SubstrateContext.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/utils.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/TxButton.js",[],"/home/aditya/parity/substrate-front-end-template/src/substrate-lib/components/DeveloperConsole.js",[],"/home/aditya/parity/substrate-front-end-template/src/config/index.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":139,"column":7,"nodeType":"90","messageId":"91","endLine":139,"endColumn":26,"fix":"92"},{"ruleId":"93","severity":1,"message":"94","line":140,"column":2,"nodeType":"95","messageId":"96","fix":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"multiline-ternary","Expected newline between consequent and alternate of ternary expression.","JSXElement","expectedConsAlt",{"range":"100","text":"101"},"eol-last","Newline required at end of file but not found.","Program","missing",{"range":"102","text":"101"},"no-global-assign","no-unsafe-negation",[5201,5202],"\n",[5212,5212]]